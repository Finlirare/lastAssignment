{"version":3,"sources":["webpack:///./src/app/login/login.module.ts","webpack:///./src/app/login/login.page.html","webpack:///./src/app/login/login.page.scss","webpack:///./src/app/login/login.page.ts","webpack:///./src/app/services/login.service.ts"],"names":[],"mappings":"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","file":"login-login-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPage } from './login.page';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild([{ path: '', component: LoginPage }])\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Login page</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n    <ion-col>\\n        <ion-row>\\n          <ion-button (click)=\\\"doGoogleLogin()\\\">Login with google</ion-button>\\n        </ion-row>\\n     </ion-col>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLnBhZ2Uuc2NzcyJ9 */\"","import { Component } from '@angular/core';\nimport { GooglePlus } from '@ionic-native/google-plus/ngx';\nimport { LoadingController, AlertController, Platform, NavController } from '@ionic/angular';\nimport { Router } from '@angular/router';\nimport { environment } from '../../environments/environment';\nimport { Storage } from '@ionic/storage';\nimport { LoginService } from '../services/login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage {\n\n  constructor(\n    private googlePlus: GooglePlus,\n    public loadingController: LoadingController,\n    private router: Router,\n    private platform: Platform,\n    public alertController: AlertController,\n    public navCtrl: NavController,\n    public storage: Storage,\n    public loginService: LoginService\n  ) { }\n/*\n  async doGoogleLogin(){\n    const loading = await this.loadingController.create({\n      message: 'Please wait...'\n    });\n    this.presentLoading(loading);\n    this.googlePlus.login({\n      'scopes': '', // optional - space-separated list of scopes, If not included or empty, defaults to `profile` and `email`.\n      'webClientId': '705830739244-ap66lon7fne6c8v2p558m27i3oslth5a.apps.googleusercontent.com', // optional - clientId of your Web application from Credentials settings of your project - On Android, this MUST be included to get an idToken. On iOS, it is not required.\n      'offline': true, // Optional, but requires the webClientId - if set to true the plugin will also return a serverAuthCode, which can be used to grant offline access to a non-Google server\n      })\n      .then(user => {\n        //save user data on the native storage\n        this.storage.set('google_user', {\n          name: user.displayName,\n          email: user.email,\n          picture: user.imageUrl\n        })\n        .then(() => {\n          this.navCtrl.navigateForward('/tabs/tab1');\n          // this.router.navigate([\"/user\"]);\n        }, (error) => {\n          console.log(error);\n        })\n        loading.dismiss();\n      }, err => {\n        console.log(err);\n        if(!this.platform.is('cordova')){\n          this.presentAlert();\n        }\n        loading.dismiss();\n      })\n  }\n\n  async presentAlert() {\n    const alert = await this.alertController.create({\n       message: 'Cordova is not available on desktop. Please try this in a real device or in an emulator.',\n       buttons: ['OK']\n     });\n\n    await alert.present();\n  }\n\n  async presentLoading(loading) {\n      return await loading.present();\n  }\n  */\n\n doGoogleLogin () {\n   this.loginService.login();\n }\n}\n","import { Injectable } from '@angular/core';\r\nimport { GooglePlus } from '@ionic-native/google-plus/ngx';\r\nimport { NavController } from '@ionic/angular';\r\nimport { Socket } from 'ng-socket-io';\r\nimport { Storage } from '@ionic/storage';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n  user: any;\r\n\r\n  constructor(private googlePlus: GooglePlus, public navCtrl: NavController, private socket: Socket, private storage: Storage) { }\r\n\r\n \r\n    login() {\r\n        this.googlePlus.login({\r\n        'scopes': '',\r\n        'webClientId': 'webClientId.apps.googleusercontent.com',\r\n        'offline': true\r\n      }).then(res => {\r\n            this.socket.emit('login', res);\r\n            this.user = {\r\n              name: res.displayName,\r\n              email: res.email,\r\n              picture: res.imageUrl\r\n            }\r\n            this.storage.set('google_user', this.user).then(() => {\r\n              this.navCtrl.navigateRoot('/tabs/tab1');\r\n            }, err => {\r\n              console.log('err');\r\n            });\r\n            //emitting the user data to the server to store it in the database\r\n            this.user = res;\r\n\r\n        })\r\n        .catch(err => {\r\n          console.error(err)\r\n        }); \r\n    }\r\n\r\n    getuser() {\r\n        this.socket.on('user', function(err, res) {\r\n            if (err) {\r\n              console.log(err);\r\n            } else {\r\n              console.log(res);\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""}